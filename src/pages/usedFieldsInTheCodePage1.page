<apex:page controller="usedFieldsInTheCode1">
    
    <script type="text/javascript">
    var __sfdcSessionId = '{!GETSESSIONID()}';
    
    </script>
    <script src="/soap/ajax/39.0/connection.js" type="text/javascript"></script>
    <script src="/soap/ajax/39.0/apex.js" type="text/javascript"></script>
    
    <apex:stylesheet value="{!URLFOR($Resource.alcon_JQuery_ui, 'jquery-ui.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.COE_JSGrid, 'jsgrid.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.COE_JSGrid, 'jsgrid-theme.min.css')}" />
    
    <apex:includeScript value="{!URLFOR($Resource.COE_FancyTree, 'jquery-3.2.1.min.js' )}" />
    <apex:includeScript value="{!URLFOR($Resource.alcon_JQuery_ui, 'jquery-ui.js' )}" />
    <apex:includeScript value="{!URLFOR($Resource.COE_JSGrid, 'jsgrid.min.js' )}" />
    
    <style>
        #actionsbar button, #progressbar {
        margin-right: 15px;
        margin-left: 15px;
        font-weight: bold;
        }
        
        #drilldownview tr, #drilldownview span.fancytree-title, #drilldownview td, .fancytree-node {
        vertical-align: middle;
        }
        #drilldownview td ~ td {
        padding-left: 5px;
        padding-right: 5px;
        }
        span.fancytree-title {
        display: inline-flex;
        align-items: center;
        }
        table.fancytree-ext-table thead tr th {
        border: 1px solid rgba(153, 153, 153, 0.25);
        background-color: rgba(243, 243, 236, 0.89);
        }
        .negativeamounts {
        background-color: #FCE2E2;
        }
        .ui-progressbar {
        position: relative;
        }
        .progress-label {
        position: absolute;
        height: 100%;
        display: inline-flex;
        align-items: center;
        left: 25%;
        font-weight: bold;
        //text-shadow: 1px 1px 0 #fff;
        }
        #progressbar {
        display: inline-block;
        vertical-align: middle;
        width: 300px;
        }
        .nodisplay, .nodisplay .progress-label {
        display: none;
        }
        
        table thead th {
        text-align: center;
        }
        
        .jsgrid-filter-row .jsgrid-cell .jsgrid-search-operator-container {
        width: 100%;
        }
        .jsgrid-filter-row .jsgrid-cell .jsgrid-search-operator-container select.jsgrid-filter-operator {
        float: left;
        vertical-align: middle;
        width: 45px;
        }
        .jsgrid-filter-row .jsgrid-cell .jsgrid-search-operator-container select.jsgrid-filter-operator ~ div{
        overflow: hidden;
        }
        .ui-autocomplete {
        max-height: 100px;
        overflow-y: auto;
        /* prevent horizontal scrollbar */
        overflow-x: hidden;
        }
        
        
        /*spinner start*/
        .loader {
           display: inline-block;
          border: 5px solid #f3f3f3;
          border-radius: 50%;
          border-top: 5px solid blue;
          border-bottom: 5px solid blue;
          width: 20px;
          height: 20px;
          -webkit-animation: spin 2s linear infinite;
          animation: spin 2s linear infinite;
        }

        @-webkit-keyframes spin {
          0% { -webkit-transform: rotate(0deg); }
          100% { -webkit-transform: rotate(360deg); }
        }

        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        /*spinner end*/
        
        
    </style>
    
    <script type="text/javascript">
     $( function() {
    $( "#From" ).datepicker();
  } );
  
    $( function() {
    $( "#To" ).datepicker();
  } );
  
  //this is to convert the input date to yyyy-mm-dd for parsing. since we are comparing with payment dates
  function formatDate(date) {
    var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;

    return [year, month, day].join('-');
}

//this is to convert date to MM/DD/YYYY used for exported file.
  function formatDateForExport(date) {
    var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;

    return [month, day, year].join('-');
}


    function validate()
    {
        var fromdateVal = Date.parse($From[0].value);
        var todateVal = Date.parse($To[0].value);
        //if validation true;
        if(!fromdateVal && !todateVal){
            alert('Please enter "Payment From Date" and "Payment To Date".');
        }else if(!fromdateVal){
            alert('Please enter "Payment From Date".');
        }else if(fromdateVal>todateVal){
            alert('"From Date" should not be greater than "To Date".');
        }else if(!todateVal){
            alert('Please enter "Payment To Date".');
        }else{
            displayPayments();
        }
        //else
        // error message popup
    }
  
    //$(function(){
    function displayPayments(){
        
        /**
         * Number.prototype.format(n, x, s, c)
         * 
         * @param integer n: length of decimal
         * @param integer x: length of whole part
         * @param mixed   s: sections delimiter
         * @param mixed   c: decimal delimiter
         *
         * Examples:
         * 12345678.9.format(2, 3, '.', ',');  // "12.345.678,90"
         * 123456.789.format(4, 4, ' ', ':');  // "12 3456:7890"
         * 12345678.9.format(0, 3, '-');       // "12-345-679"
         */
        Number.prototype.format = function(n, x, s, c) {
            var re = '\\d(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\D' : '$') + ')',
                num = this.toFixed(Math.max(0, ~~n));
            
            return (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ','));
        };
        
        (function extendjsGrid(){
            
            if (!jsGrid)
                return;
            
            jsGrid.sortStrategies.formattedNumber = function(l, r) {
                return parseFloat(l.replace(",","")) - parseFloat(r.replace(",",""));                    
            };
            
            var TextField = jsGrid.TextField;
            
            function CurrencyField(config) {
                TextField.call(this, config);
            }
            
            CurrencyField.prototype = new TextField({
                
                sorter: "number",
                align: "right",
                readOnly: false,
                
                itemTemplate: function(value) {
                    
                    return value.format(2, 3, ',', '.');
                },
                
                filterTemplate: function() {
                    if (!this.filtering)
                        return "";
                    var self = this,
                        $container = $("<div>")
                    .addClass("jsgrid-search-operator-container");
                    this.filterOperatorControl = this._createFilterOperators();
                    this.filterControl = this._createTextBox();
                    this.filterControl.autocomplete({ source: [] });
                    if (this.autosearch) {
                        this.filterOperatorControl.on("change", function(e) {
                            self._grid.search();
                        });
                        this.filterControl.on("change", function(e) {
                            self._grid.search();
                        });
                        this.filterControl.on("keyup", function(e) {
                            self._grid.search();
                            if (e.which === 13) {
                                e.preventDefault();
                            }
                        });
                    }
                    this.filterOperatorControl.appendTo($container);
                    var $controlContainer = $("<div>");
                    this.filterControl.appendTo($controlContainer);
                    $controlContainer.appendTo($container);
                    return $container;
                },
                
                filterValue: function() {
                    if ((this.filterControl.val() === undefined) || (this.filterControl.val().length == 0))
                        return undefined;
                    var filterVal = {}, self=this;
                    filterVal.value = parseFloat(this.filterControl.val().replace(",","") || 0);
                    filterVal.operator = this.filterOperatorControl.val();
                    filterVal.matches = function(val) { return self._filterComparer[filterVal.operator](val, filterVal.value); };
                    return filterVal;
                },
                
                insertValue: function() {
                    return this.insertControl.val()
                    ? parseFloat(this.insertControl.val().replace(",","") || 0)
                    : undefined;
                },
                
                editValue: function() {
                    return this.editControl.val()
                    ? parseFloat(this.editControl.val().replace(",","") || 0)
                    : undefined;
                },
                
                _createTextBox: function() {
                    return $("<input>").attr("type", "number")
                    .prop("readonly", !!this.readOnly);
                },
                
                _createFilterOperators: function() {
                    var $result = $("<select>").addClass("jsgrid-filter-operator"),
                        ops = ["=", "?", "<", "=", ">", "="];
                    
                    $.each(ops, function(i, op) {
                        $("<option>")
                        .attr("value", op)
                        .text(op)
                        .appendTo($result);
                    });
                    $result.prop("selectedIndex", 0);
                    return $result;
                },
                
                _filterComparer: {
                    "=": function (l, r) { return (Math.abs(l - r) < 0.004); },
                    "?": function (l, r) { return (Math.abs(l - r) >= 0.004); },
                    "<": function (l, r) { return (l < r); },
                    "=": function (l, r) { return (l <= r); },
                    ">": function (l, r) { return (l > r); },
                    "=": function (l, r) { return (l >= r); }
                }
            });
            
            jsGrid.fields.currency = jsGrid.CurrencyField = CurrencyField;
            
            //Integer Field start
            function IntegerField(config) {
                TextField.call(this, config);
            }
            
            IntegerField.prototype = new TextField({
                
                sorter: "number",
                align: "right",
                readOnly: false,
                
                itemTemplate: function(value) {
                    
                    return value.format();
                },
                
                filterTemplate: function() {
                    if (!this.filtering)
                        return "";
                    var self = this,
                        $container = $("<div>")
                    .addClass("jsgrid-search-operator-container");
                    this.filterOperatorControl = this._createFilterOperators();
                    this.filterControl = this._createTextBox();
                    this.filterControl.autocomplete({ source: [] });
                    if (this.autosearch) {
                        this.filterOperatorControl.on("change", function(e) {
                            self._grid.search();
                        });
                        this.filterControl.on("change", function(e) {
                            self._grid.search();
                        });
                        this.filterControl.on("keyup", function(e) {
                            self._grid.search();
                            if (e.which === 13) {
                                e.preventDefault();
                            }
                        });
                    }
                    this.filterOperatorControl.appendTo($container);
                    var $controlContainer = $("<div>");
                    this.filterControl.appendTo($controlContainer);
                    $controlContainer.appendTo($container);
                    return $container;
                },
                
                filterValue: function() {
                    if ((this.filterControl.val() === undefined) || (this.filterControl.val().length == 0))
                        return undefined;
                    var filterVal = {}, self=this;
                    filterVal.value = parseInt(this.filterControl.val().replace(",","") || 0);
                    filterVal.operator = this.filterOperatorControl.val();
                    filterVal.matches = function(val) { return self._filterComparer[filterVal.operator](val, filterVal.value); };
                    return filterVal;
                },
                
                insertValue: function() {
                    return this.insertControl.val()
                    ? parseInt(this.insertControl.val().replace(",","") || 0)
                    : undefined;
                },
                
                editValue: function() {
                    return this.editControl.val()
                    ? parseInt(this.editControl.val().replace(",","") || 0)
                    : undefined;
                },
                
                _createTextBox: function() {
                    return $("<input>").attr("type", "number")
                    .prop("readonly", !!this.readOnly);
                },
                
                _createFilterOperators: function() {
                    var $result = $("<select>").addClass("jsgrid-filter-operator"),
                        ops = ["=", "?", "<", "=", ">", "="];
                    
                    $.each(ops, function(i, op) {
                        $("<option>")
                        .attr("value", op)
                        .text(op)
                        .appendTo($result);
                    });
                    $result.prop("selectedIndex", 0);
                    return $result;
                },
                
                _filterComparer: {
                    "=": function (l, r) { return (l == r); },
                    "?": function (l, r) { return (l != r); },
                    "<": function (l, r) { return (l < r); },
                    "=": function (l, r) { return (l <= r); },
                    ">": function (l, r) { return (l > r); },
                    "=": function (l, r) { return (l >= r); }
                }
            });
            
            jsGrid.fields.integer = jsGrid.IntegerField = IntegerField;
            //Integer Field End
            
            var baseTextFieldFilterTemplate = jsGrid.TextField.prototype.filterTemplate;
            jsGrid.TextField.prototype.filterTemplate = function () {
                var self = this, retVal;
                if (baseTextFieldFilterTemplate)
                    retVal = baseTextFieldFilterTemplate.call(this, arguments);
                this.filterControl.on("change", function(e) {
                    self._grid.search();
                });
                this.filterControl.off("keypress", false);
                this.filterControl.on("keyup", function(e) {
                    self._grid.search();
                    if (e.which === 13) {
                        e.preventDefault();
                    }
                });
                return retVal;
            };
            
        })();
        
        var GridData,
            SelectedOrgHcp,
            payments = { all:[], idMap: {} },
            expenses = { all: [], idMap: {} },
            interactions = { all: [], idMap: {} },
            locations = { all: [], intLocMap: {}},
            interBudgets = { all: [], intIdBudMap: {}},
            costCenters = { all: [], intIdCostCenterMap: {}},
            identifiers = { all:[], idMap: {} },
            <!--orgTree = { rootNodes: {!orgsJSON}, idMap: {}, all:[]  },-->
                serviceObjectMap = {!serviceObjectMapJSON},
                expenseFinalData = {all: []},
                AJAXtimeout = 15 * (60 * 1000);
            
        function DataSlicer() {
            function computeBatches(soSliceInfo) {
                
                var idSoql = "SELECT Id FROM " + soSliceInfo.baseObjectName + " ORDER BY Id",
                    chunkList = [],
                    dfd = new $.Deferred();
                window.setTimeout(function() {
                    
                    var result = sforce.connection.query(idSoql, {
                        onSuccess: function(result) {
                            function inspectChunk(res) {
                                
                                var retVal = {};
                                retVal.totalRecords = parseInt(res['size']);
                                retVal.batchSize = 0;
                                retVal.done = (res.done && (res.done === 'true'));
                                retVal.queryLocator = res.queryLocator;
                                //retVal.queryLocator will look like this:
                                //01gJ000000IYnYLIA1-2000
                                //if there are no more records to get, retVal.queryLocator will be null
                                if (retVal.queryLocator != null) {
                                    var qlComponents = retVal.queryLocator.split('-');
                                    if (qlComponents.length > 1) {
                                        retVal.cursor = qlComponents[0];
                                        retVal.offset = parseInt(qlComponents[1]);
                                    }
                                }
                                if ('records' in res) {
                                    if (Object.prototype.toString.call(res.records) === '[object Array]') {
                                        if (res.records.length > 0) {
                                            retVal.firstId = res.records[0].Id;
                                            retVal.lastId = res.records[res.records.length-1].Id;
                                            retVal.batchSize = res.records.length;
                                        }           
                                    } else {
                                        //or else just a single object
                                        if ('Id' in res.records) {
                                            retVal.firstId = res.records.Id;
                                            retVal.lastId = res.records.Id;
                                            retVal.batchSize = 1;
                                        }
                                    }
                                }
                                return retVal;
                            }
                            function prepareBatchesFromChunks() {
                                
                                var runningTotal = 0,
                                    batchInfo = {};
                                batchInfo.firstId = chunkList[0].firstId;
                                soSliceInfo.batches = [];
                                for (var i=0;i<chunkList.length-1;i++) {
                                    runningTotal += chunkList[i].batchSize;
                                    if ((runningTotal + chunkList[i+1].batchSize) > soSliceInfo.maxBatchSize){
                                        batchInfo.lastId = chunkList[i].lastId;
                                        batchInfo.batchSize = runningTotal;
                                        soSliceInfo.batches.push(batchInfo);
                                        
                                        runningTotal = 0;
                                        batchInfo = {};
                                        batchInfo.firstId = chunkList[i+1].firstId;
                                    }
                                }
                                runningTotal += chunkList[chunkList.length-1].batchSize;
                                batchInfo.lastId = chunkList[chunkList.length-1].lastId;
                                batchInfo.batchSize = runningTotal;
                                soSliceInfo.batches.push(batchInfo);
                            }
                            
                            var dataChunk = inspectChunk(result);
                            soSliceInfo.totalRecords = dataChunk.totalRecords;
                            
                            if (soSliceInfo.totalRecords < soSliceInfo.maxBatchSize) {
                                //dfd.notify(1);
                                dfd.resolve(soSliceInfo);
                                return;
                            }
                            
                            if (soSliceInfo.totalRecords > 0) {
                                chunkList.push(dataChunk);
                                dataChunk.offset = dataChunk.offset || dataChunk.totalRecords;
                            }
                            if (dataChunk.done) {
                                prepareBatchesFromChunks();
                                //dfd.notify(1);
                                dfd.resolve(soSliceInfo);
                                return;
                            }
                            window.setTimeout(function getNextChunk() {
                                
                                sforce.connection.queryMore(dataChunk.queryLocator, {
                                    onSuccess: function(qmResult) {
                                        
                                        dataChunk = inspectChunk(qmResult);
                                        chunkList.push(dataChunk);
                                        if (dataChunk.done) {
                                            prepareBatchesFromChunks();
                                            //dfd.notify(1);
                                            dfd.resolve(soSliceInfo);
                                            return;
                                        }
                                        window.setTimeout(getNextChunk, 0);
                                    },
                                    onFailure: function() {
                                    },
                                    timeout: AJAXtimeout
                                });
                            }, 0);
                        },
                        onFailure: function(errors) {
                        },
                        timeout: AJAXtimeout
                    });
                    
                }, 0);
                return dfd.promise();
            }
            
            this.serviceMap = {};
            this.objectMap = {};
            this.maxBatchSize = 50000;
            
            this.loadServiceMap = function loadServiceMap(serviceObjectMap) {
                
                console.log('Started loading service map :' + new Date());
                
                var dfd = new $.Deferred(),
                    self = this;
                window.setTimeout(function() {
                    
                    //Prepare a map of the services - object - chunks
                    if (serviceObjectMap && serviceObjectMap.length) {
                        //var i = 0;
                        var allpromise = [];
                        var workChunk = 99/serviceObjectMap.length;
                        for(var i = 0; i < serviceObjectMap.length; i++) {
                            processSO(i);
                        }
                        /*Promise.all(allpromise).then(values => { 
                                    if(values.length == serviceObjectMap.length) {
                                        console.log('End loading service map :' + new Date());
                                        dfd.resolve();
                                    }
                                });
                                 */   
                        
                        //Promise.all(allpromise).then(function(index) { 
                        $.when.apply($,allpromise).done(function() { 
                            // i=i++;
                            //if(i == serviceObjectMap.length-1) {
                            console.log('End loading service map :' + new Date());
                            dfd.resolve();
                            //}
                        });
                        function  processSO(i){
                            var so = serviceObjectMap[i];
                            var soSliceInfo = self.serviceMap[so.apiName] = {};
                            
                            soSliceInfo.apiName = so.apiName;
                            soSliceInfo.baseObjectName = so.baseObject;
                            soSliceInfo.maxBatchSize = (so.maxBatchSize ? parseInt(so.maxBatchSize, 10) : self.maxBatchSize);
                            //soSliceInfo.query=so.query;
                            console.log('Started Querying and Computing batches:' + new Date());
                            var prom = computeBatches(soSliceInfo);
                            /*prom.progress(function(percentComplete) {
                                    //dfd.notify(percentComplete + parseInt(workChunk * (i+1), 10));
                                });
                                */
                            prom.done(function() {
                                console.log('End Querying and Computing batches:' + new Date());
                            });
                            allpromise.push(prom);
                            
                            
                            /*
                                        promise.done(function() {
                                            
                                            console.log('End Querying and Computing batches:' + new Date());
                                            if (i < serviceObjectMap.length-1) {
                                                i++;
                                                window.setTimeout(processSO, 0);
                                            }
                                            else{
                                                console.log('End loading service map :' + new Date());
                                                
                                                dfd.resolve();
                                            }
                                        });
                                    */
                            
                        }
                    }
                    
                }, 0);
                return dfd.promise();
            }
            this.callService = function callService(controllerName, methodName, serviceArgs, callbacks) {
                
                var apiName = controllerName + '-' + methodName;
                //See if this service needs to be chunked
                if (this.serviceMap[apiName]) {
                    var soSliceInfo = this.serviceMap[apiName];
                    if (soSliceInfo.batches && soSliceInfo.batches.length) {
                        var batches = soSliceInfo.batches,
                            batchIndex = 0,
                            allResults = [];
                        window.setTimeout(function getNextBatch() {
                            
                            serviceArgs.startId = batches[batchIndex].firstId;
                            serviceArgs.endId = batches[batchIndex].lastId;
                            sforce.apex.execute(controllerName, methodName, serviceArgs, {
                                onSuccess: function(batchResults) {
                                    
                                    allResults = allResults.concat(batchResults);
                                    if (batchIndex < batches.length-1) {
                                        batchIndex++;
                                        window.setTimeout(getNextBatch, 0);
                                    }
                                    else
                                        if (callbacks && callbacks.onSuccess) {
                                            callbacks.onSuccess(allResults);
                                        }
                                },
                                onFailure: function(errors) {
                                },
                                timeout: AJAXtimeout
                            });
                        }, 0);
                        return;
                    }
                }
                sforce.apex.execute(controllerName, methodName, serviceArgs, callbacks);
            }
        }
        
        function PaymentExpense() {
            this.ExpenseName;
            this.DateofExpense; 
            this.PaymentDate;
            this.PaymentName;
            this.PaymentStatus;
            this.PaymentType;
            this.KOLName;
            this.ExpenseType;
            this.SettlementCurrency;
            this.SettlementAmount;
            this.PaymentCurrency;
            this.PaymentAmount;
            this.TransactionCurrency;
            this.TransactionAmount;
            this.TaxID;
            this.RPPSID;
            this.USRRAFID;
            this.GSTorTPSID;
            this.HSTID;
            this.QSTorTVQID;
            this.KOLInteractionCostCode1;
            this.KOLCostCode1Allocation;
            this.KOLInteractionCostCode2;
            this.KOLCostCode2Allocation;
            this.SBBudgetName;
            this.InteractionNumber;
            this.InteractionCategory;
            this.InteractionType;
            this.InteractionDate;
            this.InteractionLocationCity;
            this.InteractionLocationProvince;
            this.RequestorName;
            this.RequestorRegion;
            this.RequestorTerritory;
        }
        
        
        
        function getInitialData(dataSlicer) {
            var dfd = new $.Deferred();
            window.setTimeout(function(){
                //mapOrgStructure();
                
                var payPromise,
                    expPromise,
                    interactionsPromise,
                    identifierPromise,
                    locPromise,
                    intBudPromise,
                    costCenterPromise,
                    allOtherPromise,
                    
                    cWait = 0,
                    crWait = 0,
                    croWait = 0,
                    intrWait = 0,
                    partWait = 0,
                    cuWait = 0;
                
                function doNotify(pendingWork) {
                    //dfd.notify(cWait+crWait+croWait+intrWait+partWait+cuWait);
                    if (pendingWork)
                        window.setTimeout(pendingWork, 0);
                }
                
                interactionsPromise = (function(){
                    var intOtherPromises;
                    var dfdint = new $.Deferred();
                    window.setTimeout(function(){
                        console.log('Calling Service Interactions :' + new Date());
                        dataSlicer.callService("alconFinanceReport", "getInteractions", {}, {onSuccess: processInteractions, onFailure: function(){}});
                        function processInteractions(results) {
                            
                            console.log('Results Received Interactions (' + results.length + ') :' + new Date());
                            crWait = 1;
                            doNotify(function(){
                                if (results && results.length) {
                                    interactions.idList = {all:[]};
                                    //parentInteractions.idList={all:[]};
                                    interactions.all = results;
                                    $.each(results, function(index, prog) {
                                        interactions.idMap[prog.Id] = prog;
                                        interactions.idList.all.push(prog.Id);
                                      
                                    });
                                }
                                
                                console.log('Processed Interactions :' + new Date());
                                
                                locPromise = (function(){
                                    var dfdloc = new $.Deferred();
                                    window.setTimeout(function(){
                                        console.log('Calling Service locations :' + new Date());
                                        dataSlicer.callService("alconFinanceReport", "getLocations", {intIDs:interactions.idList.all}, {onSuccess: processLocations, onFailure: function(){}});
                                        function processLocations(results) {
                                            
                                            console.log('Results Received locations (' + results.length + ') :' + new Date());
                                            crWait = 1;
                                            doNotify(function(){
                                                if (results && results.length) {
                                                    locations.all = results;
                                                    //locations.idList = {all:[]};
                                                    $.each(results, function(index, loc) {
                                                        locations.intLocMap[loc.ahm__Interaction__c] = loc;
                                                        
                                                        //locations.idList.all.push(loc.Id);
                                                    });
                                                }
                                                console.log('Processed locations :' + new Date());
                                                crWait = 2;
                                                doNotify(function() {
                                                    dfdloc.resolve();
                                                });
                                            });
                                            
                                        }
                                    },0);
                                    return dfdloc.promise();
                                })();
                                
                                intBudPromise = (function(){
                                    var dfdib = new $.Deferred();
                                    window.setTimeout(function(){
                                        console.log('Calling Service interBudgets :' + new Date());
                                        dataSlicer.callService("alconFinanceReport", "getInteractionBudgetSharings", {intIDs:interactions.idList.all}, {onSuccess: processIntBudgets, onFailure: function(){}});
                                        function processIntBudgets(results) {
                                            
                                            console.log('Results Received interBudgets (' + results.length + ') :' + new Date());
                                            crWait = 1;
                                            doNotify(function(){
                                                if (results && results.length) {
                                                    interBudgets.all = results;
                                                    interBudgets.interIdMap = {};
                                                    //interBudgets.idList = {all:[]};
                                                    $.each(results, function(index, intbud) {
                                                        if(intbud.ahm__Budget__r){
                                                            if(interBudgets.intIdBudMap[intbud.ahm__Interaction__c]){
                                                                if(!interBudgets.intIdBudMap[intbud.ahm__Interaction__c][intbud.ahm__Budget__c])
                                                                {
                                                                    interBudgets.intIdBudMap[intbud.ahm__Interaction__c][intbud.ahm__Budget__c] = intbud.ahm__Budget__r.Name;
                                                                    var budnames = interBudgets.intIdBudMap[intbud.ahm__Interaction__c]["budgetNames"]+ ',<br/>' + intbud.ahm__Budget__r.Name;
                                                                    interBudgets.intIdBudMap[intbud.ahm__Interaction__c]["budgetNames"] = budnames;
                                                                }
                                                            }else{
                                                                interBudgets.intIdBudMap[intbud.ahm__Interaction__c] = {};
                                                                interBudgets.intIdBudMap[intbud.ahm__Interaction__c][intbud.ahm__Budget__c] = intbud.ahm__Budget__r.Name;
                                                                interBudgets.intIdBudMap[intbud.ahm__Interaction__c]["budgetNames"] = intbud.ahm__Budget__r.Name;
                                                            }
                                                        }
                                                    });
                                                }
                                                console.log('Processed interBudgets :' + new Date());
                                                crWait = 2;
                                                doNotify(function() {
                                                    dfdib.resolve();
                                                });
                                            });
                                            
                                        }
                                    },0);
                                    return dfdib.promise();
                                })();               
                                
                                  costCenterPromise = (function(){
                                    var dfdib = new $.Deferred();
                                    window.setTimeout(function(){
                                        console.log('Calling Service costCenters :' + new Date());
                                        dataSlicer.callService("alconFinanceReport", "getCostCenters", {intIDs:interactions.idList.all}, {onSuccess: processCostCenters, onFailure: function(){}});
                                        function processCostCenters(results) {
                                            
                                            console.log('Results Received costCenters (' + results.length + ') :' + new Date());
                                            crWait = 1;
                                            doNotify(function(){
                                                if (results && results.length) {
                                                    costCenters.all = results;
                                                    costCenters.interIdMap = {};
                                                    //costCenters.idList = {all:[]};
                                                    //debugger;
                                                    $.each(results, function(index, costCent) {
                                                        
                                                        if(costCenters.intIdCostCenterMap[costCent.Interaction__c])
                                                        {
                                                            costCenters.intIdCostCenterMap[costCent.Interaction__c].push(costCent);
                                                        }
                                                        else
                                                        {
                                                            var tempCostCenter= [];
                                                            tempCostCenter.push(costCent);
                                                            costCenters.intIdCostCenterMap[costCent.Interaction__c] = tempCostCenter;
                                                        }

                                                    });
                                                }
                                                console.log('Processed costCenters :' + new Date());
                                                crWait = 2;
                                                doNotify(function() {
                                                    dfdib.resolve();
                                                });
                                            });
                                            
                                        }
                                    },0);
                                    return dfdib.promise();
                                })();               
                                
                                intOtherPromises = [locPromise,intBudPromise,costCenterPromise];
                                $.when.apply($,intOtherPromises).done(function(){
                                    crWait = 2;
                                    doNotify(function() {
                                        dfdint.resolve();
                                    });
                                });
                                
                                
                                
                            });
                            
                        }
                    },0);
                    return dfdint.promise();
                })();
                
                
                payPromise = (function(){
                    var dfdpay = new $.Deferred();
                    //var paymentOtherPromises;
                    window.setTimeout(function(){
                        console.log('Calling Service Payments :' + new Date());
                        dataSlicer.callService("alconFinanceReport", "getPayments", {}, {onSuccess: processPayments, onFailure: function(){}});
                        function processPayments(results) {
                            
                            console.log('Results Received Payments (' + results.length + ') :' + new Date());
                            crWait = 1;
                            doNotify(function(){
                                if (results && results.length) {
                                    payments.accountIdList = {all:[]};
                                    payments.IdList = {all:[]};
                                    payments.all = results;
                                    $.each(results, function(index, py) {
                                    var fromdate1 = new Date($From[0].value);
                                    //alert(fromdate1);
                                    var fromdate2 = formatDate(fromdate1);//Date.parse($From[0].value);
                                    //alert(fromdate2);
                                    var fromdate = Date.parse(fromdate2);
                                    //alert(fromdate);
                                    
                                    var todate1= new Date($To[0].value);
                                    var todate2 = formatDate(todate1);//Date.parse($To[0].value);
                                    var todate = Date.parse(todate2);

                                    if(Date.parse(py.ahm__Payment_Date__c) >= fromdate && Date.parse(py.ahm__Payment_Date__c) <= todate)
                                        {
                                            payments.idMap[py.Id] = py;
                                            payments.accountIdList.all.push(py.ahm__Remit_To__c);
                                            payments.IdList.all.push(py.Id); 
                                        }
                                        
                                    });
                                }
                                console.log('Processed Payments :' + new Date());
                                
                                identifierPromise = (function(){
                                    var dfdide = new $.Deferred();
                                    window.setTimeout(function(){
                                        console.log('Calling Service Identifiers :' + new Date());
                                        dataSlicer.callService("alconFinanceReport", "getIdentifiers", {accIDs:payments.accountIdList.all}, {onSuccess: processIdentifiers, onFailure: function(){}});
                                        function processIdentifiers(results) {
                                            
                                            console.log('Results Received Identifiers (' + results.length + ') :' + new Date());
                                            crWait = 1;
                                            doNotify(function(){
                                                if (results && results.length) {
                                                    //identifiers.idList = {all:[]};
                                                    identifiers.all = results;
                                                    $.each(results, function(index, ide) {
                                                        var tempobj={};
                                                        if(identifiers.idMap[ide.ahm__HCP__c])
                                                        {
                                                            tempobj = identifiers.idMap[ide.ahm__HCP__c];
                                                            if(tempobj[ide.ahm__Identifier_Type__c])
                                                            {   
                                                                var tempNames = tempobj[ide.ahm__Identifier_Type__c];
                                                                tempobj[ide.ahm__Identifier_Type__c] = tempNames + ", <br/>" + ide.Name;
                                                            }
                                                            else
                                                                tempobj[ide.ahm__Identifier_Type__c] = ide.Name;
                                                        }
                                                        else
                                                        {   
                                                            identifiers.idMap[ide.ahm__HCP__c] = tempobj;
                                                            tempobj[ide.ahm__Identifier_Type__c] = ide.Name;
                                                        }
                                                    });
                                                }
                                                console.log('Processed Identifiers :' + new Date());
                                                crWait = 2;
                                                doNotify(function() {
                                                    dfdide.resolve();
                                                });
                                            });
                                            
                                        }
                                    },0);
                                    return dfdide.promise();
                                })();
                                
                                
                                    identifierPromise.done(function(){
                                        crWait = 2;
                                        doNotify(function() {
                                            dfdpay.resolve();
                                            //dfd.resolve();
                                        });
                                    });
                                    
                                });
                                /*
                                paymentOtherPromises = [identifierPromise,expPromise];
                                $.when.apply($,paymentOtherPromises).done(function(){
                                    
                                    crWait = 2;
                                    doNotify(function() {
                                        dfdpay.resolve();
                                    });
                                });*/
                            }
                        });
                            
                        
                    //},0);
                    return dfdpay.promise();
                })();
                
                allOtherPromise = [interactionsPromise, payPromise];
                
                $.when.apply($,allOtherPromise).done(function(){
                    //expPromise = (function(){
                        //var dfdexp = new $.Deferred();
                        window.setTimeout(function(){
                            console.log('Calling Service Expenses :' + new Date());
                            dataSlicer.callService("alconFinanceReport", "getExpenses", {payIds:payments.IdList.all}, {onSuccess: processExpenses, onFailure: function(){}});
                            function processExpenses(results) {
                                
                                console.log('Results Received Expenses (' + results.length + ') :' + new Date());
                                crWait = 1;
                                doNotify(function(){
                                    if (results && results.length) {
                                        //expenses.idList = {all:[]};
                                        expenses.all = results;
                                        $.each(results, function(index, ex) {
                                            expenses.idMap[ex.Id] = ex;
                                            //expenses.idList.all.push(ex.Id);
                                            
                                            var obj = new PaymentExpense();
                                            obj.ExpenseName = ex.Name;
                                            obj.DateofExpense = ex.ahm__Date_of_Expense__c;
                                            obj.PaymentDate = payments.idMap[ex.ahm__Payment_ID__c].ahm__Payment_Date__c;
                                            obj.PaymentName = payments.idMap[ex.ahm__Payment_ID__c].Name;
                                            obj.PaymentStatus = payments.idMap[ex.ahm__Payment_ID__c].ahm__Status__c;
                                            obj.PaymentType = payments.idMap[ex.ahm__Payment_ID__c].ahm__Payment_Method__c;
                                            
                                            if(payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__r)
                                            obj.KOLName=payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__r.Name;
                                            
                                            obj.ExpenseType=ex.ahm__Spend_Type__c;
                                            obj.SettlementCurrency=payments.idMap[ex.ahm__Payment_ID__c].ahm__Settlement_Amount_Currency__c;
                                            obj.SettlementAmount=payments.idMap[ex.ahm__Payment_ID__c].ahm__Total_Amount_in_Settlement_Currency__c;
                                            obj.PaymentCurrency= ex.ahm__Payment_Currency__c;//payments.idMap[ex.ahm__Payment_ID__c].CurrencyIsoCode;
                                            obj.PaymentAmount=payments.idMap[ex.ahm__Payment_ID__c].ahm__Total_Amount_in_Payment_Currency__c;
                                            obj.TransactionCurrency=payments.idMap[ex.ahm__Payment_ID__c].CurrencyIsoCode;
                                            obj.TransactionAmount=ex.ahm__Amount__c;
                                            /*for(let item in identifierTypes)
                                            {
                                                var tempIdent = payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__c + "_" + item;
                                                if(identifiers.idMap[tempIdent])
                                            }*/
                                            
                                            if(identifiers.idMap[payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__c])
                                            {
                                                if(identifiers.idMap[payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__c]["Tax ID"])
                                                    obj.TaxID=  identifiers.idMap[payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__c]["Tax ID"];
                                                
                                                if(identifiers.idMap[payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__c]["RPPS ID"]!= undefined)
                                                    obj.RPPSID= identifiers.idMap[payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__c]["RPPS ID"];
                                                
                                                if(identifiers.idMap[payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__c]["USRRAF ID"]!= undefined)
                                                    obj.USRRAFID = identifiers.idMap[payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__c]["USRRAF ID"];
                                                
                                                if(identifiers.idMap[payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__c]["GST/TPS ID"]!= undefined)
                                                    obj.GSTorTPSID = identifiers.idMap[payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__c]["GST/TPS ID"];
                                                
                                                if(identifiers.idMap[payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__c]["HST ID"]!= undefined)
                                                    obj.HSTID = identifiers.idMap[payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__c]["HST ID"];
                                                
                                                if(identifiers.idMap[payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__c]["QST/TVQ ID"]!= undefined)
                                                    obj.QSTorTVQID = identifiers.idMap[payments.idMap[ex.ahm__Payment_ID__c].ahm__Remit_To__c]["QST/TVQ ID"];
                                            }
                                            var progId = payments.idMap[ex.ahm__Payment_ID__c].ahm__Interaction__c;
                                            var parentProgID1 = payments.idMap[ex.ahm__Payment_ID__c].ahm__Interaction__r.ahm__Parent__c;
                                            
                                            if(costCenters.intIdCostCenterMap[parentProgID1]){
                                                //debugger;
                                                if( costCenters.intIdCostCenterMap[parentProgID1].length && costCenters.intIdCostCenterMap[parentProgID1].length > 0)
                                                {
                                                    obj.KOLInteractionCostCode1 = costCenters.intIdCostCenterMap[parentProgID1][0].Name;
                                                    obj.KOLCostCode1Allocation = costCenters.intIdCostCenterMap[parentProgID1][0].Cost_Center_Budget_Percentage__c;
                                                }
                                                if( costCenters.intIdCostCenterMap[parentProgID1].length && costCenters.intIdCostCenterMap[parentProgID1].length > 1)
                                                {
                                                    obj.KOLInteractionCostCode2 = costCenters.intIdCostCenterMap[parentProgID1][1].Name;
                                                    obj.KOLCostCode2Allocation=costCenters.intIdCostCenterMap[parentProgID1][1].Cost_Center_Budget_Percentage__c;
                                                }
                                            }else if(costCenters.intIdCostCenterMap[progId]){
                                                //debugger;
                                                if( costCenters.intIdCostCenterMap[progId].length && costCenters.intIdCostCenterMap[progId].length > 0)
                                                {
                                                    obj.KOLInteractionCostCode1 = costCenters.intIdCostCenterMap[progId][0].Name;
                                                    obj.KOLCostCode1Allocation = costCenters.intIdCostCenterMap[progId][0].Cost_Center_Budget_Percentage__c;
                                                }
                                                if( costCenters.intIdCostCenterMap[progId].length && costCenters.intIdCostCenterMap[progId].length > 1)
                                                {
                                                    obj.KOLInteractionCostCode2 = costCenters.intIdCostCenterMap[progId][1].Name;
                                                    obj.KOLCostCode2Allocation=costCenters.intIdCostCenterMap[progId][1].Cost_Center_Budget_Percentage__c;
                                                }
                                            }
                                            
                                            
                                            if(interBudgets.intIdBudMap[progId])
                                                obj.SBBudgetName = interBudgets.intIdBudMap[progId]["budgetNames"];
                                            
                                            if(interactions.idMap[progId].Name)
                                            obj.InteractionNumber = interactions.idMap[progId].Name;
                                            
                                            obj.InteractionCategory = interactions.idMap[progId].ahm__Interaction_Category__c;
                                            obj.InteractionType = interactions.idMap[progId].ahm__Interaction_Type_Rule__c;
                                            obj.InteractionDate = interactions.idMap[progId].ahm__Start_Date__c;
                                            
                                            if(interBudgets.intIdBudMap[progId] && locations.intLocMap[progId] && locations.intLocMap[progId].ahm__Location_Status__c && locations.intLocMap[progId].ahm__Location_Status__c=='Confirmed'){
                                                if(locations.intLocMap[progId].ahm__City__c)
                                                obj.InteractionLocationCity=locations.intLocMap[progId].ahm__City__c;
                                            
                                                if(locations.intLocMap[progId].ahm__State_Province__c)
                                                obj.InteractionLocationProvince=locations.intLocMap[progId].ahm__State_Province__c;
                                            }else{
                                                if(locations.intLocMap[progId] && locations.intLocMap[progId].ahm__City__c)
                                                obj.InteractionLocationCity=locations.intLocMap[progId].ahm__City__c;
                                            
                                                if(locations.intLocMap[progId] && locations.intLocMap[progId].ahm__State_Province__c)
                                                obj.InteractionLocationProvince=locations.intLocMap[progId].ahm__State_Province__c;                                         
                                            }
                                            
                                            if(interactions.idMap[progId].ahm__Owner_Name__c)
                                            obj.RequestorName=interactions.idMap[progId].ahm__Owner_Name__c;
                                            
                                            if(interactions.idMap[progId].ahm__Region__r)
                                            obj.RequestorRegion=interactions.idMap[progId].ahm__Region__r.Name;
                                            
                                            if(interactions.idMap[progId].ahm__Parent__c){
                                                //if(interactions.idMap[progId].ahm__Primary_Organization_Unit__r)
                                                obj.RequestorTerritory=interactions.idMap[progId].ahm__Parent__r.ahm__Primary_Organization_Unit__r.Name;
                                            }else{
                                                obj.RequestorTerritory=interactions.idMap[progId].ahm__Primary_Organization_Unit__r.Name;                                                                                               
                                            }
                                            expenseFinalData.all.push(obj);
                                        });
                                    }
                                    console.log('Processed Expenses :' + new Date());
                                    crWait = 2;
                                    doNotify(function() {
                                        //dfdexp.resolve();
                                        dfd.resolve();
                                    });
                                });
                                
                            }
                        },0);
                        //return dfdexp.promise();
                    //})(); 
                });
                //identifierPromise.done(function(){
                
                                
                
                
            },0);
            return dfd.promise();
            
        }
        
        
        
        try{
        $spin.show();
        var ds = new DataSlicer();
        
        var dsPromise = ds.loadServiceMap(serviceObjectMap);
        
        dsPromise.done(function() {
            var promise = getInitialData(ds);
            
            promise.done(function() {
                
                //Assigning all data during first load.
                GridData = expenseFinalData.all;
                if(expenseFinalData.all.length == 0){
                    $("#exportalldatabtn").prop('disabled', true);
                    $("#exportalldatabtn").css("cursor", "not-allowed");
                }
                else
                {
                    $("#exportalldatabtn").prop('disabled', false);
                    $("#exportalldatabtn").css("cursor", "default");
                }
                $("#grid").jsGrid({
                    noDataContent: "No Record found for the current payment date range.",
                    width: "100%",
                    filtering: false,
                    editing: false,
                    selecting:true,
                    sorting: true,
                    paging: true,
                    autoload: true,
                    fields: [   
                        { name: "ExpenseName", type: "text", title: "Expense Name", align: "left", width: 100},
                        { name: "DateofExpense", type: "text", title: "Date of Expense", align: "left", width: 110},
                        { name: "PaymentDate", type: "text", title: "Payment Date", align: "left", width: 110},
                        { name: "PaymentName", type: "text", title: "Payment Name", align: "left", width: 110},
                        { name: "PaymentStatus", type: "text", title: "Payment Status", align: "left", width: 110},
                        { name: "PaymentType", type: "text", title: "Payment Type (EFT/Credit Card)", align: "left", width: 200},
                        { name: "KOLName", type: "text", title: "KOL Name/Payee", align: "left", width: 110},
                        { name: "ExpenseType", type: "text", title: "Expense Type", align: "left", width: 110},
                        { name: "SettlementCurrency", type: "text", title: "Settlement Currency", align: "left", width: 150},
                        { name: "SettlementAmount", type: "text", title: "Settlement Amount", align: "left", width: 125 },
                        { name: "PaymentCurrency", type: "text", title: "Payment Currency", width: 125},
                        { name: "PaymentAmount", type: "text", title: "Payment Amount", width: 125},
                        { name: "TransactionCurrency", type: "text", title: "Transaction Currency", align: "left", width: 150 },
                        { name: "TransactionAmount", type: "text", title: "Transaction Amount", align: "left", width: 150 },
                        { name: "TaxID", type: "text", title: "Tax ID", align: "left", width: 100},
                        { name: "RPPSID", type: "text", title: "RPPS ID", width: 100 },
                        { name: "USRRAFID", type: "text", title: "USRRAF ID", width: 100 },
                        { name: "GSTorTPSID", type: "text", title: "GST/TPS ID", width: 100 },
                        { name: "HSTID", type: "text", title: "HST ID", width: 100 },
                        { name: "QSTorTVQID", type: "text", title: "QST/TVQ ID", width: 100 },
                        { name: "KOLInteractionCostCode1", type: "text", title: "KOL Interaction Cost Code 1", width: 200},
                        { name: "KOLCostCode1Allocation", type: "text", title: "KOL Cost Code 1 Allocation", width: 200},
                        { name: "KOLInteractionCostCode2", type: "text", title: "KOL Interaction Cost Code 2", width: 200},
                        { name: "KOLCostCode2Allocation", type: "text", title: "KOL Cost Code 2 Allocation", width: 200},
                        { name: "SBBudgetName", type: "text", title: "SB Budget Name", width: 125 },
                        { name: "InteractionNumber", type: "text", title: "Interaction Number", width: 150 },
                        { name: "InteractionCategory", type: "text", title: "Interaction Category", width: 150 },
                        { name: "InteractionType", type: "text", title: "Interaction Type", width: 150 },
                        { name: "InteractionDate", type: "text", title: "Interaction Date", width: 150 },
                        { name: "InteractionLocationCity", type: "text", title: "Interaction Location City", width: 200 },
                        { name: "InteractionLocationProvince", type: "text", title: "Interaction Location Province", width: 200 },
                        { name: "RequestorName", type: "text", title: "Requestor Name", width: 150 },
                        { name: "RequestorRegion", type: "text", title: "Requestor Region", width: 150 },
                        { name: "RequestorTerritory", type: "text", title: "Requestor Territory", width: 150 }
                        
                    ],
                    controller: {
                        loadData : function loadData(filter) {
                            var upperCaser = (String.prototype.toLocaleUpperCase ? "toLocaleUpperCase" : "toUpperCase"),
                                currencyFieldComparer = {};
                            currencyFieldComparer["="] = function (l, r) {
                                return (Math.abs(l - r) < 0.004);
                            }; 
                            return $.grep(GridData, function(rec) {
                                return (  ( (!filter.ExpenseName) || (rec.ExpenseName[upperCaser]().indexOf(filter.ExpenseName[upperCaser]()) > -1))
                                        && ( (!filter.HCPName) || (rec.HCPName[upperCaser]().indexOf(filter.HCPName[upperCaser]()) > -1))
                                        && ( (!filter.DateofExpense) || (rec.DateofExpense[upperCaser]().indexOf(filter.DateofExpense[upperCaser]()) > -1))
                                        && ( (!filter.PaymentDate) || (rec.PaymentDate[upperCaser]().indexOf(filter.PaymentDate[upperCaser]()) > -1))
                                        && ( (!filter.PaymentName) || (rec.PaymentName[upperCaser]().indexOf(filter.PaymentName[upperCaser]()) > -1))
                                        && ( (!filter.PaymentStatus) || (rec.PaymentStatus[upperCaser]().indexOf(filter.PaymentStatus[upperCaser]()) > -1))
                                        && ( (!filter.PaymentType) || (rec.PaymentType[upperCaser]().indexOf(filter.PaymentType[upperCaser]()) > -1))
                                        && ( (!filter.KOLName) || (rec.KOLName[upperCaser]().indexOf(filter.KOLName[upperCaser]()) > -1))
                                        && ( (!filter.ExpenseType) || (rec.ExpenseType[upperCaser]().indexOf(filter.ExpenseType[upperCaser]()) > -1))
                                        && ( (!filter.SettlementCurrency) || (rec.SettlementCurrency[upperCaser]().indexOf(filter.SettlementCurrency[upperCaser]()) > -1))
                                        && ( (!filter.SettlementAmount) || (rec.SettlementAmount[upperCaser]().indexOf(filter.SettlementAmount[upperCaser]()) > -1))
                                        && ( (!filter.PaymentCurrency) || (rec.PaymentCurrency[upperCaser]().indexOf(filter.PaymentCurrency[upperCaser]()) > -1))
                                        && ( (!filter.TransactionCurrency) || (rec.TransactionCurrency[upperCaser]().indexOf(filter.TransactionCurrency[upperCaser]()) > -1))
                                        && ( (!filter.TransactionAmount) || (rec.TransactionAmount[upperCaser]().indexOf(filter.TransactionAmount[upperCaser]()) > -1))
                                        && ( (!filter.TaxID) || (rec.TaxID[upperCaser]().indexOf(filter.TaxID[upperCaser]()) > -1))
                                        && ( (!filter.RPPSID) || (rec.RPPSID[upperCaser]().indexOf(filter.RPPSID[upperCaser]()) > -1))
                                        && ( (!filter.USRRAFID) || (rec.USRRAFID[upperCaser]().indexOf(filter.USRRAFID[upperCaser]()) > -1))
                                        && ( (!filter.GSTorTPSID) || (rec.GSTorTPSID[upperCaser]().indexOf(filter.GSTorTPSID[upperCaser]()) > -1))
                                        && ( (!filter.HSTID) || (rec.HSTID[upperCaser]().indexOf(filter.HSTID[upperCaser]()) > -1))
                                        && ( (!filter.QSTorTVQID) || (rec.QSTorTVQID[upperCaser]().indexOf(filter.QSTorTVQID[upperCaser]()) > -1))
                                        && ( (!filter.KOLInteractionCostCode1) || (rec.KOLInteractionCostCode1[upperCaser]().indexOf(filter.KOLInteractionCostCode1[upperCaser]()) > -1))
                                        && ( (!filter.KOLCostCode1Allocation) || (rec.KOLCostCode1Allocation[upperCaser]().indexOf(filter.KOLCostCode1Allocation[upperCaser]()) > -1))
                                        && ( (!filter.KOLInteractionCostCode2) || (rec.KOLInteractionCostCode2[upperCaser]().indexOf(filter.KOLInteractionCostCode2[upperCaser]()) > -1))
                                        && ( (!filter.KOLCostCode2Allocation) || (rec.KOLCostCode2Allocation[upperCaser]().indexOf(filter.KOLCostCode2Allocation[upperCaser]()) > -1))
                                        && ( (!filter.SBBudgetName) || (rec.SBBudgetName[upperCaser]().indexOf(filter.SBBudgetName[upperCaser]()) > -1))
                                        && ( (!filter.InteractionNumber) || (rec.InteractionNumber[upperCaser]().indexOf(filter.InteractionNumber[upperCaser]()) > -1))
                                        && ( (!filter.InteractionCategory) || (rec.InteractionCategory[upperCaser]().indexOf(filter.InteractionCategory[upperCaser]()) > -1))
                                        && ( (!filter.InteractionType) || (rec.InteractionType[upperCaser]().indexOf(filter.InteractionType[upperCaser]()) > -1))
                                        && ( (!filter.InteractionDate) || (rec.InteractionDate[upperCaser]().indexOf(filter.InteractionDate[upperCaser]()) > -1))
                                        && ( (!filter.InteractionLocationCity) || (rec.InteractionLocationCity[upperCaser]().indexOf(filter.InteractionLocationCity[upperCaser]()) > -1))
                                        && ( (!filter.InteractionLocationProvince) || (rec.InteractionLocationProvince[upperCaser]().indexOf(filter.InteractionLocationProvince[upperCaser]()) > -1))
                                        && ( (!filter.RequestorName) || (rec.RequestorName[upperCaser]().indexOf(filter.RequestorName[upperCaser]()) > -1))
                                        && ( (!filter.RequestorRegion) || (rec.RequestorRegion[upperCaser]().indexOf(filter.RequestorRegion[upperCaser]()) > -1))
                                        && ( (!filter.RequestorTerritory) || (rec.RequestorTerritory[upperCaser]().indexOf(filter.RequestorTerritory[upperCaser]()) > -1))
                                        && ( (!filter.PaymentAmount) || (rec.PaymentAmount[upperCaser]().indexOf(filter.PaymentAmount[upperCaser]()) > -1))
                                       );
                            });
                        }
                    }
                });
                
                $spin.hide();
            });
            
        });
    
        }
        catch(err)
        {
            $spin.hide();
            throw err;
        }
        //Export Start
        
        function exportFinanceRecords(displayedOnly) {
            
             /*
            $actionsbar.attr("disabled",true);
           
            var $t = startProgressbar("Exporting...", function(){
                $actionsbar.attr("disabled",false);
            });
            */
            var promise;
            if (displayedOnly){
                promise = prepareDisplayedFinanceGridRecords();
            }
            else
                promise = prepareAllFinanceGridRecords();
            
            /*
            promise.progress(function(percentComplete) {
                
                if ($t && $t.progressbar && (percentComplete != undefined))
                    $t.progressbar("value", parseInt(percentComplete * 0.45, 10));
            });
            */
            promise.done(function(FinanceGridRecords) {
                
                /*
                if ($t && $t.progressbar)
                    $t.progressbar("value", 45);
                */
                var promise1 = prepareFinanceReportData(FinanceGridRecords);
                
                /*
                promise1.progress(function(percentComplete) {
                    if ($t && $t.progressbar && (percentComplete != undefined))
                        $t.progressbar("value", parseInt(45 + (percentComplete * 0.45), 10));
                });
                */
                promise1.done(function(FinanceReportString) {
                    
                    /*
                    if ($t && $t.progressbar)
                        $t.progressbar("value", 90);
                    */
                                                        var fromdate1X = new Date($From[0].value);

                                                        var fromdateX = formatDateForExport(fromdate1X);//Date.parse($From[0].value);
                                                        
                                                        var Todate1Y = new Date($To[0].value);
                                                        var TodateY = formatDateForExport(Todate1Y);//Date.parse($From[0].value);
                                                        
                    var promise2 = exportFile( displayedOnly ? 'FinanceReport_Selected.csv' : 'FinanceReport_'+fromdateX+'_'+TodateY+'.csv', FinanceReportString);
                    promise2.done(function(){
                    /*
                        if ($t.progressbar)
                            $t.progressbar("value", 100);
                    */
                    });
                    
                });
            });
        }
        
        function prepareAllFinanceGridRecords() {
            var dfd = new $.Deferred();
            window.setTimeout(function() {
                if (!expenseFinalData.all || !expenseFinalData.all.length) {
                    dfd.resolve(null);
                    return;
                }
                if (expenseFinalData.all && (expenseFinalData.all.length > 0)) {
                    //dfd.resolve(expenseFinalData.all);
                    dfd.resolve($("#grid").jsGrid("option", "data"));
                    return;
                }
                
            }, 0);
            return dfd.promise();
        }
        
        function prepareDisplayedFinanceGridRecords() {
            var dfd = new $.Deferred();
            window.setTimeout(function() {
                var result, $view;
                    $view = $("#grid");
                    var filter = $view.jsGrid("getFilter"),
                    controller = $view.jsGrid("option", "controller");
                    result = controller.loadData(filter);
                    dfd.resolve(result);
            }, 0);
            return dfd.promise();
        }
        
        function prepareFinanceReportData(FinanceReportRecords) {
            var dfd = new $.Deferred();
            window.setTimeout(function() {
                  var FinanceData = 'Expense Name,Date of Expense,Payment Date,Payment Name,';
                FinanceData += 'Payment Status,Payment Type (EFT/Credit Card),KOL Name/Payee,Expense Type,Settlement Currency,';
                FinanceData += 'Settlement Amount,Payment Currency,Payment Amount,Transaction Currency,Transaction Amount,';
                FinanceData += 'Tax ID,RPPS ID,USRRAF ID,GST/TPS ID,HST ID,QST/TVQ ID,';
                FinanceData += 'KOL Interaction Cost Code 1,KOL Cost Code 1 Allocation,KOL Interaction Cost Code 2,KOL Cost Code 2 Allocation,SB Budget Name,Interaction number,Interaction Category,Interaction Type,Interaction Date,Interaction Location City,Interaction Location Province,Requestor name,Requestor Region,Requestor Territory\n';
                
                var chunkSize = Math.ceil(FinanceReportRecords.length/10), index = 0, chunkIndex, bd;
                window.setTimeout(function writeRecords() {
                    chunkIndex = 0;
                    while ((chunkIndex < chunkSize) && (index < FinanceReportRecords.length)) {
                        bd = FinanceReportRecords[index];
                        FinanceData += '"' + bd.ExpenseName;
                        FinanceData += '","' + bd.DateofExpense;
                        FinanceData += '","' + bd.PaymentDate;
                        FinanceData += '","' + bd.PaymentName;
                        FinanceData += '","' + bd.PaymentStatus;
                        
                        if(bd.PaymentType!=undefined){
                        FinanceData += '","' + bd.PaymentType;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        FinanceData += '","' + bd.KOLName;
                        FinanceData += '","' + bd.ExpenseType;

                                                
                        if(bd.SettlementCurrency!=undefined){
                        FinanceData += '","' + bd.SettlementCurrency;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                                                
                        if(bd.SettlementAmount!=undefined){
                        FinanceData += '","' + bd.SettlementAmount;
                        }else{                      
                        FinanceData += '","' + '';
                        }                       
                        
                        if(bd.PaymentCurrency!=undefined){
                        FinanceData += '","' + bd.PaymentCurrency;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        if(bd.PaymentAmount!=undefined){
                        FinanceData += '","' + bd.PaymentAmount;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        if(bd.TransactionCurrency!=undefined){
                        FinanceData += '","' + bd.TransactionCurrency;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        if(bd.TransactionAmount!=undefined){
                        FinanceData += '","' + bd.TransactionAmount;
                        }else{                      
                        FinanceData += '","' + '';
                        }                       
                        
                        if(bd.TaxID!=undefined){
                        FinanceData += '","' + bd.TaxID;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        if(bd.RPPSID!=undefined){
                        FinanceData += '","' + bd.RPPSID;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        if(bd.USRRAFID!=undefined){
                        FinanceData += '","' + bd.USRRAFID;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        if(bd.GSTorTPSID!=undefined){
                        FinanceData += '","' + bd.GSTorTPSID;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        if(bd.HSTID!=undefined){
                        FinanceData += '","' + bd.HSTID;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        if(bd.QSTorTVQID!=undefined){
                        FinanceData += '","' + bd.QSTorTVQID;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        if(bd.KOLInteractionCostCode1!=undefined){
                        FinanceData += '","' + bd.KOLInteractionCostCode1;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        if(bd.KOLCostCode1Allocation!=undefined){
                        FinanceData += '","' + bd.KOLCostCode1Allocation;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        if(bd.KOLInteractionCostCode2!=undefined){
                        FinanceData += '","' + bd.KOLInteractionCostCode2;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        if(bd.KOLCostCode2Allocation!=undefined){
                        FinanceData += '","' + bd.KOLCostCode2Allocation;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        if(bd.SBBudgetName!=undefined){
                        FinanceData += '","' + bd.SBBudgetName;
                        }else{                      
                        FinanceData += '","' + '';
                        }
                        
                        FinanceData += '","' + bd.InteractionNumber;
                        FinanceData += '","' + bd.InteractionCategory;
                        FinanceData += '","' + bd.InteractionType;
                        FinanceData += '","' + bd.InteractionDate;
                        
                        if(bd.InteractionLocationCity!=undefined){
                        FinanceData += '","' + bd.InteractionLocationCity;
                        }else{                      
                        FinanceData += '","' + '';
                        }                        
                        
                        if(bd.InteractionLocationProvince!=undefined){
                        FinanceData += '","' + bd.InteractionLocationProvince;
                        }else{                      
                        FinanceData += '","' + '';
                        }                       
                        
                        FinanceData += '","' + bd.RequestorName;
                        FinanceData += '","' + bd.RequestorRegion;
                        FinanceData += '","' + bd.RequestorTerritory+ '"\n';

                        index++;
                        chunkIndex++;
                    }
                    if (index >= FinanceReportRecords.length)
                        dfd.resolve(FinanceData);
                    else {
                        //dfd.notify(parseInt(((index/FinanceReportRecords.length)*100), 10));
                        window.setTimeout(writeRecords, 0);
                    }
                    
                }, 0);
            }, 0);
            return dfd.promise();
        }
        
        function exportFile(filename, contentString) {
            var dfd = new $.Deferred();
            window.setTimeout(function() {
                var fname = filename || 'FinanceExport.csv',
                contents = "\ufeff"+contentString || '';
                var FinanceDataBlob = new Blob([contents], { type: 'application/csv;charset=utf-8;' }),
                    link;
                if (window.navigator && window.navigator.msSaveBlob) {
                    navigator.msSaveBlob(FinanceDataBlob, fname);
                }
                else {
                    link = document.createElement('a');
                    link.setAttribute('href', URL.createObjectURL(FinanceDataBlob));
                    link.setAttribute('download', fname);
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
                dfd.resolve();
            }, 0);
            return dfd.promise();
        }
        
        
        var $exportalldatabtn = $("#exportalldatabtn");
         /*$actionsbar = $("#actionsbar").children();*/
            
        /*$("#actionsbar button").button();*/

        $exportalldatabtn.unbind('click');
        $exportalldatabtn.click(function(event) {
            /*if(!expenseFinalData.all || !expenseFinalData.all.length){
                alert('No Record to Export for the current payment date range.');
            }else{
                exportFinanceRecords(false);
            }
            */
            exportFinanceRecords(false);
        });
        
        //Export End
    
    }    
    
    </script>
    
    <div id="progressbar" class="nodisplay" ><div class="progress-label">Loading...</div></div>
    <!--<br/>     -->
    <div id="actionsbar" style="margin:10px;">
    <b><font size="4">Alcon Finance report</font></b><br/><br/>
    <b>Payment From Date : <input type="text" id="From"/></b> <b>Payment To Date : <input type="text" id="To"/></b><br/><br/>
                
        <div id="spin" class="loader"></div>

        <button id="display"  >Display</button>
        <button id="exportalldatabtn">Export Finance Report</button>
        
    </div>    

    <div id="grid"></div>
    
     <script>
        var $spin = $("#spin");
        $spin.hide();
        var $display = $("#display");
        $display.click(function(event) {
                validate();
            });
        var $From = $( "#From" );
        var $To = $( "#To" );
        $("#exportalldatabtn").button();
        $("#display").button();
        
        $("#exportalldatabtn").prop('disabled', true);
        $("#exportalldatabtn").css("cursor", "not-allowed");
    </script>
    
</apex:page>